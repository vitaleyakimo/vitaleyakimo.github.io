import os
import json
import time
from pathlib import Path

def load_json(filepath):
    with open(filepath, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_json(filepath, data):
    with open(filepath, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def parse_multicategory_file(filepath):
    if not os.path.isfile(filepath):
        return None
    with open(filepath, 'r', encoding='utf-8') as f:
        lines = f.read().splitlines()

    result = {}
    current_category = None
    current_lines = []

    for line in lines:
        stripped = line.strip()
        if stripped.startswith("category="):
            if current_category is not None:
                result[current_category] = current_lines
            current_category = stripped.split("=", 1)[1]
            current_lines = []
        else:
            if stripped:
                current_lines.append(stripped)

    if current_category is not None:
        result[current_category] = current_lines

    return result

def main():
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ portfolio.json –∏–∑ links.txt –∏ info.txt")
    print("–§–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –ª–µ–∂–∞—Ç—å –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ —Å portfolio.json\n")

    portfolio_input = input("–ü—É—Ç—å –¥–æ portfolio.json (Enter = ./portfolio.json): ").strip()
    if not portfolio_input:
        portfolio_input = "portfolio.json"

    portfolio_path = Path(portfolio_input).resolve()
    if not portfolio_path.is_file():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {portfolio_path}")
        time.sleep(5)
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É, –≥–¥–µ –ª–µ–∂–∏—Ç portfolio.json
    base_dir = portfolio_path.parent
    links_path = base_dir / "links.txt"
    info_path = base_dir / "info.txt"

    print(f"üìÅ –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {base_dir}")
    print(f"üîç –ò—â—É: {links_path.name} –∏ {info_path.name}")

    if not links_path.is_file():
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {links_path}")
        time.sleep(5)
        return
    if not info_path.is_file():
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {info_path}")
        time.sleep(5)
        return

    try:
        portfolio = load_json(portfolio_path)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è portfolio.json: {e}")
        time.sleep(5)
        return

    mode = input("–†–µ–∂–∏–º:\n1 ‚Äî –î–æ–±–∞–≤–∏—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n2 ‚Äî –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å\n–í—ã–±–æ—Ä: ").strip()
    overwrite = (mode == "2")

    links_data = parse_multicategory_file(links_path)
    info_data = parse_multicategory_file(info_path)

    if links_data is None or not links_data:
        print("‚ùå links.txt –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –±–ª–æ–∫–æ–≤ category=...")
        time.sleep(5)
        return
    if info_data is None or not info_data:
        print("‚ùå info.txt –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –±–ª–æ–∫–æ–≤ category=...")
        time.sleep(5)
        return

    all_categories = set(links_data.keys()) | set(info_data.keys())
    processed = 0

    for cat in sorted(all_categories):
        links = links_data.get(cat, [])
        info = info_data.get(cat, [])

        if not links or not info:
            print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{cat}': –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Å—ã–ª–æ–∫ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–π.")
            continue

        if len(links) != len(info):
            n = min(len(links), len(info))
            print(f"‚ö†Ô∏è  –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ '{cat}': {len(links)} —Å—Å—ã–ª–æ–∫, {len(info)} –æ–ø–∏—Å–∞–Ω–∏–π ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º {n}")
            links, info = links[:n], info[:n]

        new_entries = [{"url": url, "alt": desc} for url, desc in zip(links, info)]

        if cat not in portfolio:
            print(f"üÜï –°–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {cat}")
            portfolio[cat] = {"photos": new_entries}
        else:
            if overwrite:
                print(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {cat} ({len(new_entries)} —Ñ–æ—Ç–æ)")
                portfolio[cat]["photos"] = new_entries
            else:
                print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {cat} (+{len(new_entries)} —Ñ–æ—Ç–æ)")
                portfolio[cat]["photos"].extend(new_entries)

        processed += 1

    if processed == 0:
        print("‚ùå –ù–∏ –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        time.sleep(5)
        return

    try:
        save_json(portfolio_path, portfolio)
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω: {portfolio_path}")
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {processed}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
        time.sleep(10)
        return

    print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
    time.sleep(30)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ.")
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
        time.sleep(10)